---
layout: documentation
title: Events
---

<h2>Events</h2>

<ul>
    <li><a href="#events">Events</a>
        <ul>
            <li><a href="#before-and-after-steps">Before &amp; After Steps</a></li>
            <li><a href="#step-events">Step Events</a></li>
        </ul>
    </li>
</ul>

<hr/>

<h3><a name="events" href="#events">Events</a></h3>

<p>
    Events in Tapestry are handled by the <a href="http://event.thephpleague.com/2.0/">league/event</a> package. This
    provides support for <a href="http://event.thephpleague.com/2.0/listeners/callables/">Closure</a> or
    <a href="http://event.thephpleague.com/2.0/listeners/classes/">Class</a> based listeners.
</p>

<h4><a name="before-and-after-steps" href="#before-and-after-steps">Before &amp; After Steps</a></h4>
<p>
    The <a href="<?= $this->url('documentation/steps') ?>#before">Before</a> and
    <a href="<?= $this->url('documentation/steps') ?>#after">After</a> steps fire events named <code>scripts.before</code>
    and <code>scripts.after</code>. These are useful for plugin writers because for example you can open a connection
    to a database or API in the Before and close it in the After.
</p>

<h4><a name="step-events" href="#step-events">Step Events</a></h4>
<p>
    An event is fired before and after each <a href="<?= $this->url('documentation/steps') ?>">step</a> is executed,
    with the after event only firing if the step returns true when invoked. The event names are all lower case with
    dot notation, for example: <code>compile.before</code> and <code>compile.after</code>.
</p>
