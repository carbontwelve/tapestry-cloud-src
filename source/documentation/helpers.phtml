---
layout: documentation
title: Helpers
---

<h2>Helpers</h2>

<ul>
    <li><a href="#helpers">Helpers</a>
        <ul>
            <li><a href="#site-variables-helper">Site Variables Helper</a></li>
            <li><a href="#url-helper">URL Helper</a></li>
        </ul>
    </li>
    <li><a href="#adding-helpers">Adding your own helpers</a>
</ul>

<h3><a name="helpers" href="#helpers">Helpers</a></h3>

<p>
    Helpers are <a href="http://platesphp.com/engine/extensions/" target="_blank">extensions to Plates PHP</a> that
    provide additional functionality to your templates. Helpers are available via <code class="language-php">$this</code>
    within any project <code>phtml</code> file. Tapestry comes with two helpers built in and it is easy to extend
    Tapestry by adding your own.
</p>

<h4><a name="site-variables-helper" href="#site-variables-helper">Site Variables Helper</a></h4>

<p>
    The site variables helper provides an interface by which you can access <a href="<?= $this->site('documentation/site-variables') ?>">site variables</a>,
    its usage is:
</p>

<pre class="language-php"><code>&lt;?= $this->site(string $key, mixed $default = null) ?&gt;</code></pre>

<p>
    The helper will return the configured site variable for the given <code class="language-php">$key</code>,
    or <code class="language-php">$default</code> if the site variable is not found. In cases where the site variable is not found and
    you do not provide a default fall back, it will return <code class="language-php">null</code>.
</p>

<p>
    The source code for the site variable helper can be found in <a
            href="https://github.com/carbontwelve/tapestry/blob/master/src/Plates/Extensions/Site.php" target="_blank">/src/Plates/Extensions/Site.php</a>.
</p>

<h4><a name="url-helper" href="#url-helper">URL Helper</a></h4>

<p>
    The URL helper is a wrapper for the
    <a href="https://github.com/carbontwelve/tapestry/blob/master/src/Entities/Url.php" target="_blank">Url entity class</a>.
    It requires that the <code>url</code> site variable be set so that it may return absolute urls to its given input.
</p>

<p>
    It's usage is:
</p>

<pre class="language-php"><code>&lt;?= $this->url(string $uri = '') ?&gt;</code></pre>

<p>
    It will append the provided <code class="language-php">$uri</code> to the configured <code>url</code> site variable,
    producing an absolute url to the location you provide.
</p>

<aside class="notice red">
    <p>
        <strong>Note:</strong> If the URL helper is used and the <code>url</code> site variable is not defined, Tapestry will return an error and exit.
    </p>
</aside>

<p>
    The source code for the URL helper can be found in <a
            href="https://github.com/carbontwelve/tapestry/blob/master/src/Plates/Extensions/Url.php" target="_blank">/src/Plates/Extensions/Url.php</a>.
</p>

<h3><a name="adding-helpers" href="#adding-helpers">Adding your own helpers</a></h3>

<p>
    Adding Helpers to Tapestry is done on a per site basis by writing an extension to the Plates engine and loading
    it via the project <a href="<?= $this->url('documentation/kernel') ?>">Kernels</a> register method.
</p>

<aside class="notice blue">
    <p>
        More in-depth details on writing extensions to the PHP Plates engine can be found
        <a href="http://platesphp.com/engine/extensions/" target="_blank">here</a>.
    </p>
</aside>

<p>
    To provide an example: The source code of this documentation contains the following Plates Extension:
</p>

<pre class="language-php"><code>&lt;?php namespace TapestryCloud\Lib;
    use League\Plates\Engine;
    use League\Plates\Extension\ExtensionInterface;

    class TestPlatesExtension implements ExtensionInterface
    {
        public function register(Engine $engine)
        {
            $engine->registerFunction('test', [$this, 'test']);
        }

        public function test()
        {
            return 'hello world!';
        }
    }
?&gt;</code></pre>

<p>
    This simple example renders <code><?= $this->test() ?></code> within the page template in place of
    <code class="language-php">&lt;?= $this->test() ?&gt;</code>. To load the extension the kernel gets the
    <code>Tapestry\Plates\Engine</code> from Tapestries IoC and injects a new instance of <code>TestPlatesExtension</code>
    into it via the engines <code>loadExtension</code> method. See below for the actual code:
</p>

<pre class="language-php"><code>&lt;?php namespace TapestryCloud;

use Tapestry\Modules\Kernel\KernelInterface;
use Tapestry\Plates\Engine;
use Tapestry\Tapestry;
use TapestryCloud\Lib\TestPlatesExtension;

class Kernel implements KernelInterface
{
    private $engine;
    private $container;

    public function __construct(Tapestry $tapestry)
    {
        $this->container = $tapestry->getContainer();
        $this->engine = $this->container->get(Engine::class);
    }

    /**
     * This method is executed by Tapestry when the Kernel is registered.
     *
     * @return void
     */
    public function register()
    {
        include (__DIR__ . '/lib/TestPlatesExtension.php');
        $this->engine->loadExtension($this->container->get(TestPlatesExtension::class));
    }

    /**
     * This method of executed by Tapestry as part of the build process.
     *
     * @return void
     */
    public function boot()
    {
        // ...
    }
}
?&gt;</code></pre>

<p>
    Both examples above are included within the
    <a href="https://github.com/carbontwelve/tapestry-cloud-src" target="_blank">source code</a> for this documentation
    and if you look at the
    <a href="https://github.com/carbontwelve/tapestry-cloud-src/blob/master/source/documentation/helpers.phtml" target="_blank">source</a>
    for this page you will notice <code class="language-php">&lt;?= $this->test() ?&gt;</code> was used above to display its example output.
</p>