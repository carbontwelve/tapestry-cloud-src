---
layout: documentation
title: Your Content
---

<h2>Creating Content</h2>

<ul>
    <li><a href="#your-content">Your Content</a>
        <ul><li><a href="#supported-file-extensions">Supported file extensions</a></li></ul>
    </li>
    <li><a href="#writing-posts">Writing posts</a>
        <ul>
            <li><a href="#a-typical-post">A typical post</a></li>
            <li><a href="#post-layouts">Post Layouts</a></li>
            <li><a href="#displaying-an-index-of-posts">Displaying an index of posts</a></li>
        </ul>
    </li>
    <li><a href="#creating-pages">Creating pages</a>
        <ul>
            <li><a href="#flatten-page-to-root">Flattening pages from subfolders into the root directory</a></li>
        </ul>
    </li>
    <li><a href="#additional-content">Additional Content</a></li>
    <li><a href="#working-with-drafts">Working with drafts</a></li>
</ul>

<hr/>

<h3><a name="your-content" href="#your-content">Your Content</a></h3>

<p>
    When building your project, Tapestry buckets files into collections based upon them matching filters for configured
    <a href="<?= $this->url('documentation/content-types') ?>">content types</a>; by default Tapestry comes with just
    two content types: <code>blog</code> and <code>default</code>.
</p>

<p>
    Essentially if a file doesn't match any configured content type filters then it gets placed into the
    <code>default</code> collection &ndash; there is no limit on how many content types you add to Tapestry,
    <a href="<?= $this->url('documentation/content-types') ?>">click here</a> for more information on how
    they work and examples on how to configure them.
</p>

<h4><a name="supported-file-extensions" href="#supported-file-extensions">Supported file extensions</a></h4>

<p>
    Out of the box Tapestry comes with <a href="<?= $this->url('documentation/content-renderers') ?>">content renderers</a>
    that support the following file extensions:
</p>

<ul>
    <li><code>.md</code>/<code>.markdown</code></li>
    <li><code>.htm</code>/<code>.html</code></li>
    <li><code>.phtml</code></li>
</ul>

<p>
    Any file not matching the above extensions will be copied with the same relative path to the build directory.
</p>

<h3><a name="writing-posts" href="#writing-posts">Writing posts</a></h3>

<p>
    Posts are looked for as files within the <code>source/_blog</code> folder of your project. Tapestry expects the
    <code>_blog</code> folder to have a flat structure containing markdown files with a filename format of:
    <code>YYYY-MM-DD-post-title.md</code> &ndash; Tapestry does however support omitting the date in preference
    of including it within the files <a href="<?= $this->url('documentation/front-matter') ?>">front matter</a>.
</p>

<aside class="notice blue">
    <p>
        By setting your posts date to a day in the future Tapestry will not treat it as published until that date is equal to
        or less than the date at which Tapestry is asked to build your website. This effectively allows you to automate your
        build system and schedule publishing.
    </p>
</aside>

<h4><a name="a-typical-post" href="#a-typical-post">A typical post</a></h4>

<p>
    The standard blog style post file contains optional front matter and the posts content. If your filename is formatted
    with the date of publish then including date and title within the files front matter is <em>optional</em>; however it will
    take precedent if set.
</p>

<pre class="language-markdown"><code>---
title: "My first post"
date: 2017-03-30
categories:
        - first post
        - update
tags:
        - example
---
# My first post
Paste this within a `.md` file inside your projects `_posts` directory and build your project to see how it gets generated.</code></pre>

<h4><a name="post-layouts" href="#post-layouts">Post Layouts</a></h4>

<p>
    The default blog content type is configured to look for a <code>blog.phtml</code> file inside the <code>_views</code>
    directory of your project. Tapestry will compile the markdown content into HTML and then inject it and the post meta
    data into the <code>blog.phtml</code>.
</p>

<p>
    You can use built in <a href="<?= $this->url('documentation/helpers') ?>/#content-helpers">content helpers</a> to display post content and meta data, e.g:
</p>

<pre class="language-php"><code>&lt;?php
// $title is equal to the posts title; this will need passing on to the parent template
// if you want it to be used for the &lt;title&gt; tag.
$this->layout('_templates/default', ['title' => $title]);
?&gt;
&lt;article&gt;
    &lt;header&gt;
        &lt;h1&gt;&lt;?= $title ?>&lt;/h1&gt;
        &lt;small&gt;Published on &lt;?= $date->format('F jS Y') ?&gt;&lt;/small&gt;
    &lt;/header&gt;
    &lt;?= $this->getContent() ?&gt;
&lt;/article&gt;
</code></pre>

<h4><a name="displaying-an-index-of-posts" href="#displaying-an-index-of-posts">Displaying an index of posts</a></h4>

<p>
    Collections are accessed by templates through the <code>use</code> front matter property for example:
</p>

<pre class="language-yaml"><code>---
use:
    - blog
    - blog_categories
---</code></pre>

<p>
    The above will prompt Tapestry to inject the template with <code>$blog_items</code> and
    <code>$blog_categories_items</code>. Note the <em>_items</em> postfix; any content type, or its taxonomy can be
    requested in this manor, for more details on this mechanism <a href="<?= $this->url('documentation/content-types') ?>">see here</a>.
</p>

<p>
    Both variables will be arrays and therefore provide you with the ability to slice, filter and order however you would
    like, either within the template itself or within a custom <a href="<?= $this->url('documentation/helpers') ?>/#adding-helpers">
    view helper function</a> that you have created.
</p>

<p>
    For example to get the first six posts and pass them to a partial template you can do the following:
</p>

<pre class="language-php"><code>&lt;?php
/**
 * @var \Tapestry\Entities\ViewFile[] $blog_items
 * @var \Tapestry\Entities\ViewFile $item
 */
foreach(array_slice($blog_items, 0, 6) as $item) {
    echo $this->fetch('_views/article_tile', ['item' => $item]);
}</code></pre>

<p>
    Within the <code>_views/article_tile</code> template you can use all the same helpers and variables as you could
    with the <code>blog.phtml</code> template to access the posts information, except on <code>$item</code> rather than
    <code>$this</code> &ndash; this is because the <code>$this</code> variable will reference the <code>article_tile</code> file
    while the <code>$item</code> variable will be the actual blog post in question.
</p>

<aside class="notice blue">
    <p>
        Take a look at the <a href="<?= $this->url('documentation/working-examples') ?>/#blog-project"> blog example project </a>
        to see documented, code examples of how the aforementioned works.
    </p>
</aside>

<h3><a name="creating-pages" href="#creating-pages">Creating pages</a></h3>

<p>
    Pages are content files that end up getting placed into the <code>default</code> collection; they can be placed anywhere
    within your source folder so long as the path is not within you configured
    <a href="<?= $this->url('documentation/configuration') ?>/#core-configuration-values-ignore">ignore</a> list.
</p>

<p>
    Tapestry supports pages with any of the <a href="#supported-file-extensions">supported file extensions</a>; if a file
    isn't supported by a configured <a href="<?= $this->site('documentation/content-renderers') ?>">renderer</a> then
    Tapestry will copy it instead.
</p>

<h4><a name="flatten-page-to-root" href="#flatten-page-to-root">Flattening pages from subfolders into the root directory</a></h4>

<p>
    If you have your projects pages organised into sub-folders but would like to flatted them into the root folder on
    build, you need to set the permalink property within the files
    <a href="<?= $this->url('documentation/front-matter') ?>">front matter</a>:
</p>

<pre class="language-yaml"><code>---
title: A super awesome page
permalink: super.html
---</code></pre>

<p>
    This will prompt Tapestry to output the rendered file content to <code>super.html</code> within the root of the
    build destination folder.
</p>

<aside class="notice blue">
    <p>
        See the <a href="<?= $this->url('documentation/permalinks') ?>/#defining-custom-permalinks">Pretty URLS</a> chapter
        for more in-depth details on custom permalinks and the available template variables.
    </p>
</aside>

<h3><a name="additional-content" href="#additional-content">Additional Content</a></h3>

<p>
    In addition to assets, pages, posts and other content types that you may choose to configure; you will likely
    have additional content files that require generating such as your robots.txt and atom.xml files. Normally due to
    their extension Tapestry treats these as assets and marks them for copying.
</p>

<p>
    However there is a way to have Tapestry generate these files and that is to have them in your source as <code>.phtml</code>
    and set their permalink to the final file extension. For example the below produces an <code>atom.xml</code> file
    containing the most recent 10 items from the posts collection:
</p>

<pre class="language-php"><code><?= $this->codeExample('atom.phtml') ?></code></pre>

<h3><a name="working-with-drafts" href="#working-with-drafts">Working with drafts</a></h3>

<p>
    Drafts are files with <code class="language-yaml">draft: true</code> set within their
    <a href="<?= $this->url('documentation/front-matter') ?>">front matter</a>. Tapestry will not
    publish files marked as draft unless the environment
    <a href="<?= $this->url('documentation/configuration') ?>/#core-configuration-values-publish-drafts">configuration</a>
    for publishing drafts is set to <code class="language-php">true</code>.
</p>

<aside class="notice blue">
    <p>
        You can set the <code>--auto-publish</code> flag to have Tapestry ignore the draft front matter if the file's date
        is less than or equal to the date that the build command was executed.
        <a href="<?= $this->url('documentation/commands/#build-command') ?>">Click here</a> for more information.
    </p>
</aside>

