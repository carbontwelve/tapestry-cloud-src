---
layout: documentation
title: Starting a new Website
---

<h2>Starting a new Website</h2>

<ul>
    <li>
        <a href="#workspace-scaffold">Start a new website</a>
    </li>
    <li>
        <a href="#project-directory-structure">Project Directory Structure</a>
        <ul>
            <li>
                <a href="#source-folder">The source folder</a>
            </li>
            <li>
                <a href="#defined-gulp-tasks">Defined Gulp tasks</a>
            </li>
        </ul>
    </li>
    <li>
        <a href="#building-and-previewing">Building &amp; Previewing</a>
        <ul>
            <li>
                <a href="#preview-php">Preview with PHP</a>
            </li>
            <li>
                <a href="#preview-gulp">Preview with Gulp Task</a>
            </li>
        </ul>
    </li>
</ul>

<h3><a name="workspace-scaffold" href="#workspace-scaffold">Start a new website</a></h3>

<p>
    The quickest way of starting a new website with Tapestry is via the <a href="<?= $this->url('documentation/commands') ?>#init-command">init command</a> which
    scaffolds out a default project directory structure for you.
</p>

<p>
    If you have Tapestry installed globally you can simply run:
</p>

<pre class="language-bash"><code>$ tapestry init example-website</code></pre>

<p>
    Tapestry will create the folder <em>example-website</em> and scaffold into it the default project directory structure.
    You will then need to run <code>npm install</code> to get the bundled gulp tasks.
</p>

<h3><a name="project-directory-structure" href="#project-directory-structure">Project Directory Structure</a></h3>

<p>
    When you initiate a new project workspace, Tapestry will generate a basic workspace folder structure including
    the files <code>package.json</code> and <code>gulpfile.js</code>; the generated folder structure as of Tapestry 1.0.6
    looks like the following:
</p>

<pre class="language-treeview">
<code>webroot/
├── source/
|   ├── _assets/
|   |   ├── img
|   |   ├── js
|   |   └── less
|   ├── _blog/
|   |   └── 2016-01-01-hello-world.md
|   ├── _templates/
|   |   └── default.phtml
|   ├── _views/
|   |   └── blog.phtml
|   └── index.phtml
├── .gitignore
├── config.php
├── gulpfile.js
├── kernel.php
└── package.json</code>
</pre>

<p>
    This generated workspace makes some assumptions on how you develop websites, namely that you use <code>npm</code> to install
    your web packages and the <code>gulp</code> task runner for executing tasks;
    more information on the tasks provided by the default gulpfile can be <a href="#defined-gulp-tasks" title="Defined Gulp tasks">found here</a>.
</p>

<h4><a name="source-folder" href="#source-folder">The source folder</a></h4>

<p>
    Any folder prefixed with an underscore is by default ignored by Tapestry; while they are ignored by the main gathering
    process, custom content types defined within your workspace configuration are able to tell Tapestry how to use ignored
    folders; e.g <code>_blog</code> is a special folder configured and used by the default
    <a href="<?= $this->url('documentation/content-types') ?>">blog content type</a>.
</p>
<p>
    The folders <code>_template</code> and <code>_views</code> are special folders that contain your templates; it wouldn't
    make much sense for Tapestry to render these straight out to html so they are prefixed with an underscore.
</p>
<p>
    The default behavior of Tapestry is to take any text file found within the source folder and attempt to generate html
    from its content. Binary files such as images are copied from source to the build directory with no additional processing.
</p>

<h4><a name="defined-gulp-tasks" href="#defined-gulp-tasks">Defined Gulp tasks</a></h4>

<p>
    To aid in quickly getting started with using Tapestry the default workspace is generated with both a <code>gulpfile.js</code> and
    a <code>package.json</code>. To use the bundled gulp task runner for development you need to first install its node_modules via
    executing <code>npm install</code>.
</p>
<p>
    Once complete you will gain access to the following gulp tasks:
</p>
<ul>
    <li>less</li>
    <li>imagemin</li>
    <li>browserfy</li>
    <li>exec</li>
    <li>browserSync</li>
</ul>
<p>
    By default gulp will execute these in order and you will notice within your workspaces source folder the folders:
    <code>css</code>, <code>js</code> and <code>img</code> appear - these will contain the generated css, js and images.
</p>
<p>
    There is also a <code>watch</code> task defined which will watch your workspaces source folder for any changes and
    execute the appropriate tasks; one additional benefit of this is the use of browserSync to display your changes in
    your browser. Running the <code>watch</code> task will prompt gulp to package up the assets found in the <code>_assets</code>
    folder and then open the generated website in chrome; each time you change a source file the relevant files will be
    re-generated and that browser window updated. This makes developing websites much easier as the task runner automates
    several tasks.
</p>

<h3><a name="building-and-previewing" href="#building-and-previewing">Building &amp; Previewing</a></h3>

<p>
    If you have Tapestry installed globally, to build your Tapestry website you execute the
    <a href="<?= $this->url('documentation/commands') ?>#build-command">build command</a> like so:
</p>

<pre class="language-bash"><code>$ tapestry build</code></pre>

<p>
    This will build the files found in the <code>source</code> directory and output them to the <code>build_local</code>,
    local is the default environment for Tapestry and the build command accepts a <code>--env</code> argument with which
    you can define the environment, e.g the following will output to <code>build_development</code>:
</p>

<pre class="language-bash"><code>$ tapestry build --env=development</code></pre>

<h4><a name="preview-php" href="#preview-php">Previewing with PHP</a></h4>

<p>
    In the interest of keeping Tapestry light, previewing your website with PHP is handled directly by PHP itself, this
    is done via the following command:
</p>

<pre class="language-bash"><code>$ php -S 127.0.0.1:3000 -t build_local</code></pre>

<p>
    PHP will then serve up the static pages at <code>http://127.0.0.1:3000</code> while providing output akin to the
    below in to your console:
</p>

<pre class="language-bash"><code>PHP 5.6.24 Development Server started at Thu Mar 23 15:42:36 2017
Listening on http://127.0.0.1:3000
Document root is F:\build_local
Press Ctrl-C to quit.
[Thu Mar 23 15:42:41 2017] 127.0.0.1:53118 [200]: /
[Thu Mar 23 15:42:41 2017] 127.0.0.1:53119 [200]: /img/staticgen.gif
[Thu Mar 23 15:43:01 2017] 127.0.0.1:53145 [200]: /documentation
</code></pre>

<h4><a name="preview-gulp" href="#preview-gulp">Previewing with Gulp Task</a></h4>

<p>
    The default project scaffold comes with <a href="<?= $this->url('documentation/your-content') ?>">Laravel Elixir</a>,
    this provides out of the box tasks for less, imagemin, browserify and browserSync. Install via <code>npm install</code>
    and then <code>gulp watch</code> to preview your site.
</p>

<p>
    browserSync will open a new browser window/tab automatically and reload the page every time a change is noticed. I
    have noticed one distinct bug with the file watcher on Windows in that it will not notice if you add a new
    file to the watched path - in that case I personally execute <code>tapestry build</code> in a separate terminal.
</p>