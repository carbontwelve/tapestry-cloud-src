---
layout: documentation
title: Content Generators
---

<h2>Content Generators</h2>

<ul>
    <li><a href="#content-generators">Content Generators</a>
        <ul>
            <li><a href="#collection-item-generator">Collection Item Generator</a></li>
            <li><a href="#taxonomy-archive-generator">Taxonomy Archive Generator</a></li>
            <li><a href="#pagination-generator">Pagination Generator</a></li>
        </ul>
    </li>
</ul>

<hr/>

<h3><a name="content-generators" href="#content-generators">Content Generators</a></h3>
<p>
    Content Generators in Tapestry are classes that take an input template file and output a number of generated files.
    Content Generators are loaded by a template file via its Front Matter. For example:
</p>

<pre class="language-yaml"><code>generator:
    - PaginationGenerator</code></pre>

<p>
    In cases where multiple generators are attached to a File, they are then executed in the order that they are set
    within the Front Matter. The output of the first generator will then be used as the input to the next. This is useful
    for paginating taxonomy archives.
</p>

<h4><a name="collection-item-generator" href="#collection-item-generator">Collection Item Generator</a></h4>
<p>
    The <a href="https://github.com/tapestry-cloud/tapestry/blob/master/src/Entities/Generators/CollectionItemGenerator.php">Collection
    Item Generator</a> was written as part of making Tapestry <em>blog aware</em>. By design it is supposed to be used
    with a Content Type's template to allow a blog post page to know which post came before and after it.
</p>

<p>
    It is added to a template via the following Front Matter:
</p>

<pre class="language-yaml"><code>generator:
    - CollectionItemGenerator</code></pre>

<p>
    When executed it will identify a files previous and next sibling within the files Content Type and assign to the file
    an instance of the <a href="<?= $this->url('documentation/collections') ?>#pagination-helpers">Paginator</a> class to
    the variable <code>$previous_next</code>.
</p>

<p>
    By default unless explicitly declared via filename or Front Matter methods a File in tapestry will have its date property
    set to the last edit time of that source file.
</p>

<p>
    This means that only Collections containing files that have had their date's set via either the filename or front
    matter methods will have deterministic ordering of their items. For example the Collection associated with the
    <em>blog</em> Content Type.
</p>

<h4><a name="taxonomy-archive-generator" href="#taxonomy-archive-generator">Taxonomy Archive Generator</a></h4>
<p>
    The <a href="https://github.com/tapestry-cloud/tapestry/blob/master/src/Entities/Generators/TaxonomyArchiveGenerator.php">Taxonomy Archive Generator</a>
    expects to be invoked on a page that has requested a Content Types taxonomy Collection. For example:
</p>

<pre class="language-yaml"><code>use:
    - blog_categories
generator:
    - TaxonomyArchiveGenerator</code></pre>

<p>
    It will generate one File for each taxonomy classification found and inject into it the classifications name set to
    the variable <code>$taxonomyName</code> and an array of ViewFiles for the Files found within that classification.
</p>

<p>
    Once the generated files have been through the Compile task the following output file structure will be generated:
</p>

<pre class="language-treeview"><code>source/
└── a-folder/
    └── categories.phtml
build_local/
└── a-folder/
    ├── fish/
    |   └── index.html
    ├── mammals/
    |   └── index.html
    ├── birds/
    |   └── index.html
    └── insects/
        └── index.html</code></pre>

<h4><a name="pagination-generator" href="#pagination-generator">Pagination Generator</a></h4>
<p>
    The <a href="https://github.com/tapestry-cloud/tapestry/blob/master/src/Entities/Generators/PaginationGenerator.php">Pagination Generator</a>
    is the only Generator to ship with Tapestry that also requires configuration. It operates upon a collection that the
    input file has requested and also requires to be told which collection and how many items per page via Front Matter
    settings. For example:
</p>

<pre class="language-yaml"><code>use:
    - blog_categories
generator:
    - TaxonomyArchiveGenerator
    - PaginationGenerator
pagination:
    provider: blog_categories
    perPage: 3</code></pre>

<br>

<aside class="notice blue">
    <p>
        Note, the ordering of generators is important as they are executed in the order that they are defined.
    </p>
</aside>

<p>
    The pagination generator is configured via the <em>pagination</em> Front Matter key, defining the collection to be
    worked on via <code>provider</code> and items per page via <code>perPage</code>.
</p>

<p>
    In the case of the above example once the generated file have been through the Compile task, the following output
    file structure will be generated:
</p>

<pre class="language-treeview"><code>source/
    └── a-folder/
        └── categories.phtml
build_local/
    └── blog/
    ├── fish/
    |   ├── 3.html
    |   ├── 2.html
    |   └── index.html
    ├── mammals/
    |   └── index.html
    ├── birds/
    |   ├── 2.html
    |   └── index.html
    └── insects/
    ├── 4.html
    ├── 3.html
    ├── 2.html
    └── index.html</code></pre>